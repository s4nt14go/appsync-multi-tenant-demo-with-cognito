service: multi-tenant-demo

frameworkVersion: '3'

custom:
  appSync:
    - ${file(serverless.appsync.yml)}

provider:
  name: aws
  runtime: nodejs14.x

functions:
  addTenant:
    handler: functions/add-tenant.handler
    environment:
      USER_POOL_ID: !Ref UserPool
      USERS_TABLE_NAME: !Ref UsersTable
      TENANTS_TABLE_NAME: !Ref TenantsTable
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminAddUserToGroup
        Resource: !GetAtt UserPool.Arn
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: 
          - !GetAtt UsersTable.Arn
          - !GetAtt TenantsTable.Arn

  addUser:
    handler: functions/add-user.handler
    environment:
      USER_POOL_ID: !Ref UserPool
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminAddUserToGroup
        Resource: !GetAtt UserPool.Arn
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn

resources:
  Resources:
    TenantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: tenantId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: tenantId
            AttributeType: S

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: tenantId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: tenantId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
        UsernameAttributes: 
          - email
        UsernameConfiguration:
          CaseSensitive: false
        Schema:
          - AttributeDataType: String
            Name: tenant_id
            Required: false # Cognito doesn't support required custom attributes
            Mutable: true
          - AttributeDataType: String
            Name: given_name
            Required: true
            Mutable: false
          - AttributeDataType: String
            Name: family_name
            Required: true
            Mutable: false
          - AttributeDataType: String
            Mutable: true
            Required: true
            Name: email

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref UserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    UserPoolAdminGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: Admin users with permissions to add users
        UserPoolId: !Ref UserPool
        GroupName: Admin

    UserPoolUserGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: Normal users
        UserPoolId: !Ref UserPool
        GroupName: User

plugins:
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function
